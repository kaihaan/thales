# Cline Rules for Thales Agent Framework

## Core Patterns

### Resource Management
- **AsyncExitStack**: Essential for MCP client cleanup
- **Context Managers**: Use `async with` for all async resources
- **Windows Asyncio**: Add `await asyncio.sleep(0.1)` before subprocess cleanup

### Code Standards
- **Return Types**: Every function MUST have return type annotation (`-> None` for no return)
- **Imports**: Use absolute imports with full module paths
- **Error Handling**: Explicit exception handling with logging integration
- **Method Naming**: Standardize on `connect()` not `connect_to_server()`

### File Structure
- **MCP Components**: `thales/src/thales/mcp/`
- **Working Directory**: Always run from `thales/src/` for module imports
- **Test Execution**: `python -m thales.mcp.tests.test_*`
- **Configuration**: Centralized dataclass patterns in `mcp_config.py`

## Workflow Patterns

### Session Startup
- **Memory Bank First**: Always read memory bank files for context
- **Progressive Implementation**: Build complexity gradually
- **Documentation Focus**: Update memory bank after significant changes

### Testing Strategy
- **Integration > Unit**: End-to-end validation more valuable for MCP
- **Real Servers**: Use actual filesystem/math servers, not mocks
- **Cleanup**: Always remove test artifacts (`mcp_test_file.txt`)

### Development Approach
- **User Codes**: User handles implementation, wants architecture guidance
- **Educational Focus**: Dual perspective (user + developer learning)

## Environment Setup

### Platform
- **OS**: Windows 10 with Git Bash
- **Python**: 3.12.9 in virtual environment `(env)`
- **Key Dependencies**: `mcp`, `python-dotenv`, custom logger at `thales.utils.logger.logger`

### Configuration Management
- **Absolute Paths**: Use full paths for server configurations
- **Dataclass Pattern**: Centralized registry for MCP servers
- **Logging Integration**: Custom logger throughout all components

## Current Focus Areas

### MCP Integration
- **Status**: Production ready foundation complete
- **Client**: Custom multi-server support with comprehensive testing
- **Servers**: Filesystem (NPX), Math (Python), Context DB (Python)

### Expanding Framework
- **RAG System**: Document management and vector storage
- **Agent Framework**: Base classes and ontology system
- **LLM Integration**: OpenAI and Anthropic client abstractions

## Critical Lessons Learned

### Windows-Specific Issues
- **ProactorEventLoop**: Requires careful subprocess cleanup sequence
- **Path Handling**: Use absolute paths to avoid import issues

### MCP Best Practices
- **Official SDK**: `pip install mcp` works reliably
- **Connection Pooling**: Consider for performance optimization
- **Error Recovery**: Implement graceful degradation for server failures

### Testing Insights
- **Comprehensive Coverage**: End-to-end more valuable than unit tests
- **Real Integration**: Test with actual MCP servers
- **Resource Cleanup**: Essential for reliable test execution
